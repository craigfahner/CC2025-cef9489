let circleDiameter = 100; // this is the diameter of the smiley face, it's also used to set the spacing of my grid
let theta = 0; // variable to use with the cos function for animation
let speed = 0.001; // variable that sets the speed of animation
let hue = 75;

function setup() {
  createCanvas(windowWidth, windowHeight);
  //colorMode(HSB); // changes to HSB color space, so I can change the background color by hue (https://p5js.org/reference/p5/colorMode/)
  angleMode(DEGREES); // sets angle mode to be in degrees (0-360)
  rectMode(CENTER); // rectangles are positioned according to the CENTER coord,
  // rather than the top left corner
}

function draw() {
  console.log(millis());

  background(hue,255,100);

  // this for loop increments y from 0 to the height of the canvas
  // it draws a line every 5 pixels, and changes the hue of the stroke color
  // to create a gradient effect
  for(let y = 0;y<height;y+=5){
    pop();
    colorMode(HSB);
    let hue = map(y,0,height,0,60);
    stroke(hue,100,100);
    strokeWeight(5);
    line(0,y,width,y);
    push();
  }
  // the for loop below creates a two dimensional grid of smiley faces
  // it uses the diameter of each face (circleDiameter) to set the spacing
  // each loop starts at circleDiameter/2 so that the grid is positioned such that the entire smiley face is visible in the top left corner
  for (let y = circleDiameter/2; y < height - circleDiameter/2; y += circleDiameter) {
    for (let x = circleDiameter/2; x < width - circleDiameter/2; x += circleDiameter) {
      push();
      translate(x, y); // the x and y variables generated by the for loops are setting the position for each smiley face
      // adding an additional translation that offsets increasingly based on the y value.
      // I was trying to animate the happy faces so that they "swayed" from left to right.
      // When I tried to use a variable to control the left/right offset, I had trouble figuring out how to reverse the direction. 
      // I eventually found that using the cos() function allowed me to create an offset that changes direction automatically. 
      // It also produced a nice smooth motion effect
      let offsetAmount = map(y,0,height,0,circleDiameter); // this creates a number that increases proportionate to the y value, setting the minimum and maximum amount of displacement
      let xOffset = cos(theta)*offsetAmount; // this calculates the displacement using the cos() function. The cos() function generates a number between -1 and 1 (https://p5js.org/reference/p5/cos/), and I am multiplying that by the offset amount
      translate(xOffset,0); // translating again to apply the offset
      speed = map(mouseY,0,height,0.0001,0.001); // changing the animation speed based on mouseY value
      theta+=speed; // incrementing the theta value according to the speed



      let rotation; // creating a rotation variable...
      rotation = map(y,50,height-50,0,180); // and setting it to a 180 degree rotation mapped to the y variable
      rotate(rotation); // rotating according to the rotation variable
      
      stroke(0);
      strokeWeight(3);
      fill("#f0f321ff");
      //rect(0,0,100,100);
      circle(0, 0, 100);
      circle(-15, -10, 10);
      circle(15, -10, 10);
      noFill();
      arc(0, 0, 60, 60, 0, 180); // arc draws the mouth as a half circle (arc from 0 to 180 degrees or PI)
      pop();
    }
  }
}
